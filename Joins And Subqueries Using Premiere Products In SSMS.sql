--								Joins And Subqueries Using Premiere Products In SSMS

-- Load The Data Included In the "Database Creation For Analysis In SSMS" File Before Running The Below Commands.

-- Setting Database To Use
USE GUIDE;

-- Viewing All Premiere Products Tables
SELECT REP_NUM, LAST_NAME, FIRST_NAME, STREET, CITY, STATE, ZIP, FORMAT(COMMISSION, 'C') AS COMMISSION, RATE
FROM REP;

SELECT CUSTOMER_NUM, CUSTOMER_NAME, STREET, CITY, STATE, ZIP, FORMAT(BALANCE, 'C') AS BALANCE , FORMAT(CREDIT_LIMIT, 'C') AS CREDIT_LIMIT, REP_NUM
FROM CUSTOMER;

SELECT ORDER_NUM, ORDER_DATE, CUSTOMER_NUM 
FROM ORDERS;

SELECT ORDER_NUM, PART_NUM, NUM_ORDERED, FORMAT(QUOTED_PRICE, 'C') AS QUOTED_PRICE
FROM ORDER_LINE;

SELECT PART_NUM, DESCRIPTION, ON_HAND, CLASS, WAREHOUSE, FORMAT(PRICE, 'C') AS PRICE
FROM PART;

-- Using A Subquery
-- What Parts Are In Class AP
SELECT PART_NUM
FROM PART
WHERE CLASS = 'AP';

-- What Orders Contain Those Parts
SELECT ORDER_NUM
FROM ORDER_LINE
WHERE PART_NUM IN ('CD52', 'DR93', 'DW11', 'KL62', 'KT03')

-- All In One
SELECT ORDER_NUM
FROM ORDER_LINE
WHERE PART_NUM IN (SELECT PART_NUM FROM PART WHERE CLASS = 'AP');

-- Using A Function In A Subquery
SELECT CUSTOMER_NUM, CUSTOMER_NAME, BALANCE
FROM CUSTOMER
WHERE BALANCE > (SELECT AVG(BALANCE) FROM CUSTOMER);

-- Nested Query Within A Query
SELECT ORDER_NUM, ORDER_DATE
FROM ORDERS
WHERE ORDER_NUM IN (SELECT ORDER_NUM FROM ORDER_LINE WHERE PART_NUM IN (SELECT PART_NUM FROM PART WHERE WAREHOUSE = 3));

-- Joining Two Tables Via A Condition
SELECT CUSTOMER_NUM, CUSTOMER_NAME, REP.REP_NUM, LAST_NAME, FIRST_NAME
FROM CUSTOMER, REP
WHERE CUSTOMER.REP_NUM = REP.REP_NUM;

SELECT ORDER_NUM, ORDER_LINE.PART_NUM, DESCRIPTION, NUM_ORDERED, QUOTED_PRICE, PRICE
FROM ORDER_LINE, PART
WHERE ORDER_LINE.PART_NUM = PART.PART_NUM;

-- Restricting A Table Join
SELECT CUSTOMER_NUM, CUSTOMER_NAME, CREDIT_LIMIT, REP.REP_NUM, LAST_NAME, FIRST_NAME
FROM CUSTOMER, REP
WHERE CUSTOMER.REP_NUM = REP.REP_NUM AND CREDIT_LIMIT = 7500;

-- Using A Join To Define An Order
SELECT DESCRIPTION
FROM ORDER_LINE, PART
WHERE ORDER_LINE.PART_NUM = PART.PART_NUM AND ORDER_NUM = 21610;

-- Joining Across 3 Tables
SELECT ORDERS.ORDER_NUM,ORDER_DATE
FROM ORDERS, ORDER_LINE, PART
WHERE ORDER_LINE.ORDER_NUM = ORDERS.ORDER_NUM AND ORDER_LINE.PART_NUM = PART.PART_NUM AND WAREHOUSE = 3;

-- Comprehensive Example
SELECT CUSTOMER_NUM,ORDERS.ORDER_NUM, ORDER_DATE, SUM(NUM_ORDERED * QUOTED_PRICE) AS ORDER_TOTAL
FROM ORDERS, ORDER_LINE
WHERE ORDERS.ORDER_NUM = ORDER_LINE.ORDER_NUM
GROUP BY ORDERS.ORDER_NUM, CUSTOMER_NUM, ORDER_DATE
HAVING SUM(NUM_ORDERED * QUOTED_PRICE) > 1000
ORDER BY ORDERS.ORDER_NUM; 

-- Using An Alias For A Join
SELECT R.REP_NUM, LAST_NAME, FIRST_NAME, CUSTOMER_NUM, CUSTOMER_NAME
FROM REP R, CUSTOMER C
WHERE R.REP_NUM = C.REP_NUM

SELECT ORDER_NUM, O.CUSTOMER_NUM, CUSTOMER_NAME, DATEADD(DAY, 20, CAST(ORDER_DATE AS DATE)) AS PROMOTION_DATE
FROM ORDERS O, CUSTOMER C 
WHERE O.CUSTOMER_NUM = C.CUSTOMER_NUM;

-- Using An Alias For Multiple Restrictions
SELECT PART_NUM, NUM_ORDERED, L.ORDER_NUM, ORDER_DATE, C.CUSTOMER_NUM, CUSTOMER_NAME, LAST_NAME
FROM ORDER_LINE L, ORDERS O, CUSTOMER C, REP R
WHERE O.ORDER_NUM = L.ORDER_NUM AND C.CUSTOMER_NUM = O.CUSTOMER_NUM AND R.REP_NUM = C.REP_NUM;

-- Customers With Credit Limits Of 10000 With Placed Orders
SELECT PART_NUM, NUM_ORDERED, L.ORDER_NUM, ORDER_DATE, C.CUSTOMER_NUM, CUSTOMER_NAME, LAST_NAME
FROM ORDER_LINE L, ORDERS O, CUSTOMER C, REP R
WHERE O.ORDER_NUM = L.ORDER_NUM AND C.CUSTOMER_NUM = O.CUSTOMER_NUM AND R.REP_NUM = C.REP_NUM
AND CREDIT_LIMIT = 10000;

-- Using Union
SELECT CUSTOMER_NUM, CUSTOMER_NAME
FROM CUSTOMER
WHERE REP_NUM = 65
UNION
SELECT C.CUSTOMER_NUM, CUSTOMER_NAME
FROM CUSTOMER C, ORDERS O
WHERE C.CUSTOMER_NUM = O.CUSTOMER_NUM;

-- Using Intersect
SELECT CUSTOMER_NUM, CUSTOMER_NAME
FROM CUSTOMER
WHERE REP_NUM = 65
INTERSECT
SELECT C.CUSTOMER_NUM, CUSTOMER_NAME
FROM CUSTOMER C, ORDERS O
WHERE C.CUSTOMER_NUM = O.CUSTOMER_NUM;

-- Inner Join
SELECT C.CUSTOMER_NUM, CUSTOMER_NAME, ORDER_NUM, ORDER_DATE
FROM CUSTOMER C
INNER JOIN ORDERS O ON C.CUSTOMER_NUM = O.CUSTOMER_NUM 
ORDER BY C.CUSTOMER_NUM

-- Left Join
SELECT C.CUSTOMER_NUM, CUSTOMER_NAME, ORDER_NUM, ORDER_DATE
FROM CUSTOMER C
LEFT JOIN ORDERS O ON C.CUSTOMER_NUM = O.CUSTOMER_NUM
ORDER BY C.CUSTOMER_NUM;

-- RIGHT Join
SELECT C.CUSTOMER_NUM, CUSTOMER_NAME, ORDER_NUM, ORDER_DATE
FROM CUSTOMER C
RIGHT JOIN ORDERS O ON C.CUSTOMER_NUM = O.CUSTOMER_NUM
ORDER BY C.CUSTOMER_NUM;

-- Cartesian Product
SELECT C.CUSTOMER_NUM, CUSTOMER_NAME, ORDER_NUM, ORDER_DATE
FROM CUSTOMER C, ORDERS;

-- All Orders By Customer
SELECT ORDER_NUM, ORDER_DATE, C.CUSTOMER_NUM, CUSTOMER_NAME
FROM ORDERS O, CUSTOMER C
WHERE O.CUSTOMER_NUM = C.CUSTOMER_NUM;

-- All Orders Placed By Customers On 10/23/2010
SELECT ORDER_NUM, ORDER_DATE, C.CUSTOMER_NUM, CUSTOMER_NAME
FROM ORDERS O, CUSTOMER C
WHERE O.CUSTOMER_NUM = C.CUSTOMER_NUM AND ORDER_DATE = '10/23/2010';

-- All Orders With Their Corresponding Parts, Quantity, And Price
SELECT O.ORDER_NUM, ORDER_DATE, PART_NUM, NUM_ORDERED, QUOTED_PRICE
FROM ORDERS O, ORDER_LINE L
WHERE O.ORDER_NUM = L.ORDER_NUM;

-- All Customers With Orders Placed On 10/23/2010
SELECT CUSTOMER_NUM, CUSTOMER_NAME 
FROM CUSTOMER 
WHERE CUSTOMER_NUM IN (SELECT CUSTOMER_NUM FROM ORDERS WHERE ORDER_DATE = '10/23/2010');

-- All Customers That Did Not Place Orders On 10/23/2010
SELECT CUSTOMER_NUM, CUSTOMER_NAME 
FROM CUSTOMER 
WHERE CUSTOMER_NUM IN (SELECT CUSTOMER_NUM FROM ORDERS WHERE ORDER_DATE != '10/23/2010');

-- All Orders With Date, Parts, Class, And Description
SELECT O.ORDER_NUM, ORDER_DATE, P.PART_NUM, DESCRIPTION, CLASS
FROM ORDER_LINE L, PART P, ORDERS O
WHERE L.PART_NUM = P.PART_NUM AND O.ORDER_NUM = L.ORDER_NUM

-- All Sales Reps With Customers Holding Credit Limits Of 10000
SELECT REP_NUM, LAST_NAME, FIRST_NAME 
FROM REP 
WHERE REP_NUM IN (SELECT REP_NUM FROM CUSTOMER WHERE CREDIT_LIMIT = 10000);

-- Customers That Bought A Gas Range
SELECT CUSTOMER_NUM, CUSTOMER_NAME
FROM CUSTOMER 
WHERE CUSTOMER_NUM IN (SELECT CUSTOMER_NUM FROM ORDER_LINE L, PART P, ORDERS O
	WHERE L.PART_NUM = P.PART_NUM AND O.ORDER_NUM = L.ORDER_NUM AND DESCRIPTION = 'Gas Range')

-- Orders By Johnson's Department Store
SELECT ORDER_NUM, ORDER_DATE
FROM ORDERS
WHERE CUSTOMER_NUM = (SELECT CUSTOMER_NUM FROM CUSTOMER WHERE CUSTOMER_NAME = 'Johnson''s Department Store');

-- All Orders Containing An Iron
SELECT ORDER_NUM, ORDER_DATE
FROM ORDERS
WHERE ORDER_NUM IN (SELECT ORDER_NUM FROM ORDER_LINE WHERE PART_NUM = 'AT94');

-- All Orders By Johnson's Department Store Or Containing A Gas Range
SELECT ORDER_NUM, ORDER_DATE
FROM ORDERS
WHERE ORDER_NUM IN (SELECT ORDER_NUM FROM ORDER_LINE WHERE PART_NUM = 'DR93') 
OR CUSTOMER_NUM = (SELECT CUSTOMER_NUM FROM CUSTOMER WHERE CUSTOMER_NAME = 'Johnson''s Department Store');

-- All Orders By Johnson's Department Store Containing A Gas Range
SELECT ORDER_NUM, ORDER_DATE
FROM ORDERS
WHERE ORDER_NUM IN (SELECT ORDER_NUM FROM ORDER_LINE WHERE PART_NUM = 'DR93') 
AND CUSTOMER_NUM = (SELECT CUSTOMER_NUM FROM CUSTOMER WHERE CUSTOMER_NAME = 'Johnson''s Department Store');

-- All Orders By Johnson's Department Store That Do Not Contain A Gas Range
SELECT ORDER_NUM, ORDER_DATE
FROM ORDERS
WHERE ORDER_NUM IN (SELECT ORDER_NUM FROM ORDER_LINE WHERE PART_NUM != 'DR93') 
AND CUSTOMER_NUM = (SELECT CUSTOMER_NUM FROM CUSTOMER WHERE CUSTOMER_NAME = 'Johnson''s Department Store');

-- Parts With A Greater Price Than Those In Class "AP" Using ALL
SELECT PART_NUM, DESCRIPTION, PRICE, CLASS
FROM PART
WHERE PRICE > ALL (SELECT PRICE FROM PART WHERE CLASS = 'AP');

-- Parts With A Greater Price Than Those In Class "AP" Using ANY
SELECT PART_NUM, DESCRIPTION, PRICE, CLASS
FROM PART
WHERE PRICE > ANY (SELECT PRICE FROM PART WHERE CLASS = 'AP');

-- ALL Parts With And Without Orders And In Stock
SELECT P.PART_NUM, P.DESCRIPTION, ON_HAND, L.ORDER_NUM, L.NUM_ORDERED
FROM ORDER_LINE L
RIGHT JOIN PART P ON L.PART_NUM = P.PART_NUM;