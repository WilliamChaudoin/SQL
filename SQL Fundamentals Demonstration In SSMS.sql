--										SQL Fundamentals Demonstration In SSMS

-- Load The Data Included In the "Database Creation For Analysis In SSMS" File Before Running The Below Commands.

-- Setting Database To Use
USE GUIDE;

-- Viewing All Premiere Products Tables
SELECT REP_NUM, LAST_NAME, FIRST_NAME, STREET, CITY, STATE, ZIP, FORMAT(COMMISSION, 'C') AS COMMISSION, RATE
FROM REP;

SELECT CUSTOMER_NUM, CUSTOMER_NAME, STREET, CITY, STATE, ZIP, FORMAT(BALANCE, 'C') AS BALANCE , FORMAT(CREDIT_LIMIT, 'C') AS CREDIT_LIMIT, REP_NUM
FROM CUSTOMER;

SELECT ORDER_NUM, ORDER_DATE, CUSTOMER_NUM 
FROM ORDERS;

SELECT ORDER_NUM, PART_NUM, NUM_ORDERED, FORMAT(QUOTED_PRICE, 'C') AS QUOTED_PRICE
FROM ORDER_LINE;

SELECT PART_NUM, DESCRIPTION, ON_HAND, CLASS, WAREHOUSE, FORMAT(PRICE, 'C') AS PRICE
FROM PART;

-- Various Ways To Use A "WHERE" Clause
SELECT CUSTOMER_NAME FROM CUSTOMER WHERE CUSTOMER_NUM = '148';
SELECT CUSTOMER_NAME FROM CUSTOMER WHERE CUSTOMER_NUM < '148';
SELECT CUSTOMER_NAME FROM CUSTOMER WHERE CUSTOMER_NUM > '148';
SELECT CUSTOMER_NAME FROM CUSTOMER WHERE CUSTOMER_NUM <= '148';
SELECT CUSTOMER_NAME FROM CUSTOMER WHERE CUSTOMER_NUM >= '148';
SELECT CUSTOMER_NAME FROM CUSTOMER WHERE CUSTOMER_NUM <> '148';
SELECT CUSTOMER_NAME FROM CUSTOMER WHERE CUSTOMER_NUM != '148';

-- Using "LIKE"
SELECT CUSTOMER_NUM, CUSTOMER_NAME, STREET, CITY, STATE, ZIP
FROM CUSTOMER
WHERE STREET LIKE '%CENTRAL%';

-- Using A Placeholder To Find Word Matches
SELECT REP_NUM, LAST_NAME, FIRST_NAME
FROM REP
WHERE LAST_NAME LIKE '%H_L%';

-- Using "IN" To Find Specific Credit Limits
SELECT CUSTOMER_NUM, CUSTOMER_NAME, CREDIT_LIMIT
FROM CUSTOMER
WHERE CREDIT_LIMIT IN (5000, 10000, 15000);

-- Sorting By The Balance Column
SELECT CUSTOMER_NUM, CUSTOMER_NAME, BALANCE
FROM CUSTOMER
ORDER BY BALANCE;

-- Sorting By Two Columns
SELECT CUSTOMER_NUM, CUSTOMER_NAME, CREDIT_LIMIT
FROM CUSTOMER
ORDER BY CREDIT_LIMIT DESC, CUSTOMER_NAME;

-- Looking For Null Values
SELECT CUSTOMER_NUM, CUSTOMER_NAME
FROM CUSTOMER
WHERE STREET IS NULL;

-- Looking For Not Null Values
SELECT CUSTOMER_NUM, CUSTOMER_NAME
FROM CUSTOMER
WHERE STREET IS NOT NULL;

-- Adding New Rows To Existing Tables
INSERT INTO REP (REP_NUM, LAST_NAME, FIRST_NAME) VALUES
('85', 'Webb', 'Tina')

SELECT REP_NUM, LAST_NAME, FIRST_NAME, STREET, CITY, STATE, ZIP, FORMAT(COMMISSION, 'C') AS COMMISSION, RATE
FROM REP;

-- Updating Values Within Tables
UPDATE REP
SET LAST_NAME = 'Perry'
WHERE REP_NUM = '85';

SELECT REP_NUM, LAST_NAME, FIRST_NAME, STREET, CITY, STATE, ZIP, FORMAT(COMMISSION, 'C') AS COMMISSION, RATE
FROM REP;

-- Deleting Added Row
DELETE REP
WHERE REP_NUM = '85';

SELECT REP_NUM, LAST_NAME, FIRST_NAME, STREET, CITY, STATE, ZIP, FORMAT(COMMISSION, 'C') AS COMMISSION, RATE
FROM REP;

-- Using A Nested Query
SELECT DESCRIPTION
FROM PART
WHERE PART_NUM IN (SELECT PART_NUM FROM ORDER_LINE WHERE ORDER_NUM = '21610');

-- Using Exists
SELECT ORDER_NUM, ORDER_DATE
FROM ORDERS
WHERE EXISTS (SELECT * FROM ORDER_LINE WHERE ORDERS.ORDER_NUM = ORDER_LINE.ORDER_NUM AND PART_NUM = 'DR93');

-- Obtaining Same Result Without Exists
SELECT ORDER_NUM, ORDER_DATE
FROM ORDERS
WHERE ORDER_NUM IN (SELECT ORDER_NUM FROM ORDER_LINE WHERE PART_NUM = 'DR93');

-- Using ALL
SELECT CUSTOMER_NUM, CUSTOMER_NAME, BALANCE, REP_NUM
FROM CUSTOMER
WHERE BALANCE > ALL (SELECT BALANCE FROM CUSTOMER WHERE REP_NUM = 65);

-- Obtaining Same Result Without ALL
SELECT CUSTOMER_NUM, CUSTOMER_NAME, BALANCE, REP_NUM
FROM CUSTOMER
WHERE BALANCE > (SELECT MAX(BALANCE) FROM CUSTOMER WHERE REP_NUM = 65);

-- Using ANY
SELECT CUSTOMER_NUM, CUSTOMER_NAME, BALANCE, REP_NUM
FROM CUSTOMER
WHERE BALANCE > ANY (SELECT BALANCE FROM CUSTOMER WHERE REP_NUM = 65);

-- Obtaining Same Result Without ANY
SELECT CUSTOMER_NUM, CUSTOMER_NAME, BALANCE, REP_NUM
FROM CUSTOMER
WHERE BALANCE > (SELECT MIN(BALANCE) FROM CUSTOMER WHERE REP_NUM = 65);

-- Using Calculations In A Select Statement
SELECT CUSTOMER_NUM, CUSTOMER_NAME, (CREDIT_LIMIT - BALANCE) AS AVAILABLE_CREDIT
FROM CUSTOMER;

-- Using Calculations With A Where Clause
SELECT CUSTOMER_NUM, CUSTOMER_NAME, (CREDIT_LIMIT - BALANCE) AS AVAILABLE_CREDIT
FROM CUSTOMER
WHERE (CREDIT_LIMIT - BALANCE) <= 5000;

-- Using The Count Function
SELECT COUNT(*) AS TOTAL
FROM PART;

-- Using Count With A Where Clause
SELECT COUNT(*) AS TOTAL
FROM PART
WHERE CLASS = 'HW';

-- The Sum Function
SELECT COUNT(CUSTOMER_NUM) AS COUNT, SUM(BALANCE) AS TOTAL
FROM CUSTOMER;

-- Other Statistical Functions
SELECT SUM(BALANCE) AS TOTAL, AVG(BALANCE) AS AVERAGE, MAX(BALANCE) AS MAX, MIN(BALANCE) AS MIN
FROM CUSTOMER;

-- Distinct Function
SELECT DISTINCT CUSTOMER_NUM
FROM ORDERS;

-- Counting Distinct Values
SELECT COUNT(DISTINCT(CUSTOMER_NUM)) AS UNIQUE_CUSTOMERS
FROM ORDERS;

-- The Average Balance Per Rep Using The Group Clause
SELECT REP_NUM, AVG(BALANCE) AS AVG_BALANCE
FROM CUSTOMER
GROUP BY REP_NUM;

-- The Average Balance For Reps With Less Than 4 Customers Using Having
SELECT REP_NUM, AVG(BALANCE) AS AVG_BALANCE
FROM CUSTOMER
GROUP BY REP_NUM
HAVING COUNT(*) < 4;

-- Using Order By And Group By
SELECT CREDIT_LIMIT, COUNT(*) AS NUMBER
FROM CUSTOMER
GROUP BY CREDIT_LIMIT
ORDER BY CREDIT_LIMIT;

-- Using Order By, Group By, Count, And Having In One Statement
SELECT CREDIT_LIMIT, COUNT(*) AS NUMBER
FROM CUSTOMER
GROUP BY CREDIT_LIMIT
HAVING COUNT(*) > 1
ORDER BY CREDIT_LIMIT;

-- Customer Credit Limit Totals By Rep
SELECT CREDIT_LIMIT, COUNT(*) AS NUMBER
FROM CUSTOMER
WHERE REP_NUM = '20'
GROUP BY CREDIT_LIMIT
ORDER BY CREDIT_LIMIT;

-- Isolating Customer Credit Limits By Reps
SELECT CREDIT_LIMIT, COUNT(*) AS NUMBER
FROM CUSTOMER
WHERE REP_NUM = '20'
GROUP BY CREDIT_LIMIT
HAVING COUNT(*) > 1
ORDER BY CREDIT_LIMIT;

-- Upper Function
SELECT REP_NUM, UPPER(LAST_NAME) AS LAST_NAME
FROM REP;

SELECT PART_NUM, UPPER(DESCRIPTION) 
FROM PART;

-- Lower Function
SELECT REP_NUM, LOWER(LAST_NAME) AS LAST_NAME
FROM REP;

-- Using Both Upper And Lower Functions
SELECT OWNER_NUM, LOWER(LAST_NAME) AS OWNER_LAST, UPPER(FIRST_NAME) AS OWNER_FIRST 
FROM OWNER;

SELECT AUTHOR_NUM, UPPER(AUTHOR_LAST) AS AUTHOR_LAST, LOWER(AUTHOR_FIRST) AS AUTHOR_FIRST 
FROM AUTHOR;

-- Round Function
SELECT PART_NUM, ROUND(PRICE, 0) AS PRICE
FROM PART;

SELECT BOOK_CODE, TITLE, ROUND(PRICE,0)
FROM BOOK;

SELECT CUSTOMER_NUM, CUSTOMER_NAME, ROUND(BALANCE,0) 
FROM CUSTOMER;

-- Floor Function
SELECT PART_NUM, FLOOR(PRICE) AS PRICE
FROM PART;

-- Adding With Dates
SELECT ORDER_NUM, DATEADD(DAY, 7, CAST(ORDER_DATE AS DATE)) AS FUTURE_DATE
FROM ORDERS;

-- Substracting With Dates
SELECT ORDER_NUM, CAST(ORDER_DATE AS DATETIME) AS ORDER_DATE, GETDATE() AS TODAYS_DATE, DATEDIFF(DAY, CAST(ORDER_DATE AS DATETIME), GETDATE()) AS DAYS_PAST
FROM ORDERS;

-- Concatenation 
SELECT REP_NUM, RTRIM(FIRST_NAME)+' '+RTRIM(LAST_NAME) AS REP_NAME
FROM REP;