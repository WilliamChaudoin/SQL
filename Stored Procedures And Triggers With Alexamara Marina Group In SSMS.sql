--								Stored Procedures And Triggers With Alexamara Marina Group In SSMS

-- Load The Data Included In the "Database Creation For Analysis In SSMS" File Before Running The Below Commands.

-- Setting Database To Use
USE GUIDE;

-- Viewing All Alexamara Marina Group Tables
SELECT MARINA_NUM, NAME, ADDRESS, CITY, STATE, ZIP
FROM MARINA;

SELECT OWNER_NUM, LAST_NAME, FIRST_NAME, ADDRESS, CITY, STATE, ZIP
FROM OWNER;

SELECT SLIP_ID, MARINA_NUM, SLIP_NUM, LENGTH, FORMAT(RENTAL_FEE, 'C') AS RENTAL_FEE, BOAT_NAME, BOAT_TYPE, OWNER_NUM 
FROM MARINA_SLIP;

SELECT CATEGORY_NUM, CATEGORY_DESCRIPTION
FROM SERVICE_CATEGORY;

SELECT SERVICE_ID, SLIP_ID, CATEGORY_NUM, DESCRIPTION, STATUS, EST_HOURS, SPENT_HOURS, NEXT_SERVICE_DATE
FROM SERVICE_REQUEST;

-- Creating A Stored Procedure To Display Owner Name
CREATE PROCEDURE OWNER_NAME
@NUM CHAR(4)
AS SELECT OWNER_NUM, RTRIM(LAST_NAME)+' '+RTRIM(FIRST_NAME) AS OWNER_NAME
FROM OWNER WHERE OWNER_NUM = @NUM

-- Execute OWNER_NAME Procedure
EXEC OWNER_NAME 'AN75'

-- Creating A Stored Procedure To Display Boat
CREATE PROCEDURE BOAT_ID
@id INT
AS SELECT MARINA_NUM, SLIP_ID, BOAT_NAME, S.OWNER_NUM, O.LAST_NAME, O.FIRST_NAME 
FROM MARINA_SLIP S, OWNER O
WHERE S.OWNER_NUM = O.OWNER_NUM AND SLIP_ID = @id;

-- Execute BOAT_ID Procedure
EXEC BOAT_ID '6';

-- Creating A Stored Procedure To Add An Owner
CREATE PROCEDURE ADD_OWNER
@num CHAR(4),
@last VARCHAR(15),
@first VARCHAR(15),
@add VARCHAR(15),
@city VARCHAR(15),
@state CHAR(2),
@zip CHAR(5)
AS INSERT INTO OWNER VALUES
(@num, @last, @first, @add, @city, @state, @zip);

-- Execute ADD_OWNER Procedure
EXEC ADD_OWNER 'WWWW','Martin','George','111 STATE', 'GREEN', 'FL', '66666';

SELECT * FROM OWNER;

-- Creating A Stored Procedure To Change Owner Last Name
CREATE PROCEDURE CHG_OWNER_LNAME
@num CHAR(4),
@lastname VARCHAR(30)
AS UPDATE OWNER
SET LAST_NAME = @lastname
WHERE OWNER_NUM = @num;

-- Execute CHG_OWNER_LNAME Procedure
EXEC CHG_OWNER_LNAME 'WWWW','Miller'

SELECT * FROM OWNER;

-- Creating A Stored Procedure To Delete Owner
CREATE PROCEDURE DEL_OWNER
@num CHAR(4)
AS DELETE OWNER
WHERE OWNER_NUM = @num;

-- Execute DEL_OWNER Procedure
EXEC DEL_OWNER 'WWWW';

SELECT * FROM OWNER;

-- Creating A Stored Procedure To Display Boats By Length
CREATE PROCEDURE LEN_SLIP
@length INT
AS SELECT MARINA_NUM, SLIP_NUM, RENTAL_FEE, LENGTH, BOAT_NAME, OWNER_NUM
FROM MARINA_SLIP
WHERE LENGTH = @length;

-- Execute LEN_SLIP Procedure
EXEC LEN_SLIP '25';

-- Creating A Stored Procedure To Update Rental Fees
CREATE PROCEDURE RENTAL
@id INT,
@num CHAR(4),
@change DECIMAL(8,2)
AS UPDATE MARINA_SLIP
SET RENTAL_FEE = RENTAL_FEE + @change
WHERE SLIP_ID = @id AND MARINA_NUM = @num;

-- Execute RENTAL Procedure
EXEC RENTAL '3', '1','100';

SELECT * FROM MARINA_SLIP;

-- Preparing For Trigger Creation
CREATE VIEW REN AS
SELECT OWNER_NUM, SUM(RENTAL_FEE) AS TOTAL_RENTAL 
FROM MARINA_SLIP 
GROUP BY OWNER_NUM

ALTER TABLE OWNER 
ADD TOTAL_RENTAL DECIMAL(8,2);

UPDATE OWNER
SET OWNER.TOTAL_RENTAL = REN.TOTAL_RENTAL
FROM REN
JOIN OWNER ON OWNER.OWNER_NUM = REN.OWNER_NUM		

DROP VIEW REN;

SELECT * FROM OWNER;

-- Creating A Trigger After An Added Boat
CREATE TRIGGER ADD_BOAT
ON MARINA_SLIP AFTER INSERT AS

DECLARE @fee DECIMAL(8,2)
DECLARE @num CHAR(4)
SELECT @fee = (SELECT RENTAL_FEE FROM INSERTED)
SELECT @num = (SELECT OWNER_NUM FROM INSERTED)
UPDATE OWNER
SET TOTAL_RENTAL = TOTAL_RENTAL + @fee
WHERE OWNER_NUM = @num;

-- Testing ADD_BOAT Trigger
INSERT INTO MARINA_SLIP VALUES
(12, '1', '7', 40, 5000, 'Jim', 'Boat', 'AN75');

SELECT * FROM OWNER;
SELECT * FROM MARINA_SLIP;

-- Creating A Trigger After Rental Fee Is Updated
CREATE TRIGGER UPDATE_RENTAL
ON MARINA_SLIP AFTER UPDATE AS
DECLARE @new DECIMAL(8,2)
DECLARE @old DECIMAL(8,2)
DECLARE @num CHAR(4)
SELECT @new = (SELECT RENTAL_FEE FROM INSERTED)
SELECT @old = (SELECT RENTAL_FEE FROM DELETED)
SELECT @num = (SELECT OWNER_NUM FROM INSERTED)
UPDATE OWNER
SET TOTAL_RENTAL = TOTAL_RENTAL + (@new - @old)
WHERE OWNER_NUM = @num;

-- Testing UPDATE_RENTAL Trigger
UPDATE MARINA_SLIP
SET RENTAL_FEE = 6000
WHERE OWNER_NUM = 'AN75' AND SLIP_NUM = '7';

SELECT * FROM OWNER;
SELECT * FROM MARINA_SLIP;

-- Creating A Trigger After A Rental Is Deleted
CREATE TRIGGER DEL_RENTAL
ON MARINA_SLIP AFTER DELETE AS
DECLARE @fee DECIMAL(8,2)
DECLARE @num CHAR(4)
SELECT @fee = (SELECT RENTAL_FEE FROM DELETED)
SELECT @num = (SELECT OWNER_NUM FROM DELETED)
UPDATE OWNER
SET TOTAL_RENTAL = TOTAL_RENTAL - @fee
WHERE OWNER_NUM = @num;

-- Testing DEL_RENTAL Trigger
DELETE MARINA_SLIP
WHERE OWNER_NUM = 'AN75' AND SLIP_NUM = '7';

SELECT * FROM OWNER;
SELECT * FROM MARINA_SLIP;