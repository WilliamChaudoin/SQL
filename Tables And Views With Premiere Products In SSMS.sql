--									Tables And Views With Premiere Products In SSMS

-- Load The Data Included In the "Database Creation For Analysis In SSMS" File Before Running The Below Commands.

-- Setting Database To Use
USE GUIDE;

-- Viewing All Premiere Products Tables
SELECT REP_NUM, LAST_NAME, FIRST_NAME, STREET, CITY, STATE, ZIP, FORMAT(COMMISSION, 'C') AS COMMISSION, RATE
FROM REP;

SELECT CUSTOMER_NUM, CUSTOMER_NAME, STREET, CITY, STATE, ZIP, FORMAT(BALANCE, 'C') AS BALANCE , FORMAT(CREDIT_LIMIT, 'C') AS CREDIT_LIMIT, REP_NUM
FROM CUSTOMER;

SELECT ORDER_NUM, ORDER_DATE, CUSTOMER_NUM 
FROM ORDERS;

SELECT ORDER_NUM, PART_NUM, NUM_ORDERED, FORMAT(QUOTED_PRICE, 'C') AS QUOTED_PRICE
FROM ORDER_LINE;

SELECT PART_NUM, DESCRIPTION, ON_HAND, CLASS, WAREHOUSE, FORMAT(PRICE, 'C') AS PRICE
FROM PART;

-- Creating Table SALES_REP
CREATE TABLE SALES_REP
(REP_NUM CHAR(2) PRIMARY KEY,
LAST_NAME VARCHAR(15) NOT NULL,
FIRST_NAME VARCHAR(15) NOT NULL,
STREET VARCHAR(15),
CITY VARCHAR(15),
STATE CHAR(2),
ZIP CHAR(5),
COMMISSION INT, 
RATE DECIMAL(3,2) );

-- Inserting Data Into SALES_REP Table
INSERT INTO SALES_REP VALUES
('25', 'Lim', 'Louis', '535 Vincent', 'Grove', 'FL', '33321', 0, .05);

-- Viewing SALES_REP Table
SELECT * 
FROM SALES_REP;

-- Deleting SALES_REP
DROP TABLE SALES_REP;

-- Creating ALTCUSTOMER TABLE
CREATE TABLE ALTCUSTOMER
(CUSTOMER_NUM CHAR(3) PRIMARY KEY,
CUSTOMER_NAME CHAR(35),
BALANCE DECIMAL(8,2), 
CREDIT_LIMIT DECIMAL(8,2),
REP_NUM CHAR(2) );

-- Inserting Values Into ALTCUSTOMER Table
INSERT INTO ALTCUSTOMER
SELECT CUSTOMER_NUM, CUSTOMER_NAME, BALANCE, CREDIT_LIMIT, REP_NUM
FROM CUSTOMER
WHERE CREDIT_LIMIT = 7500;

-- Changing Values In ALTCUSTOMER
UPDATE ALTCUSTOMER SET CUSTOMER_NAME = 'All Season Sport' WHERE CUSTOMER_NUM = '842'; 
UPDATE ALTCUSTOMER SET CREDIT_LIMIT = 8000 WHERE REP_NUM = 20 AND BALANCE < CREDIT_LIMIT; 
UPDATE ALTCUSTOMER SET CUSTOMER_NAME = 'Smith Sport' WHERE CUSTOMER_NUM = '356';
UPDATE ALTCUSTOMER SET BALANCE = NULL WHERE CUSTOMER_NUM = 725;

-- Adding More Values To ALTCUSTOMER
INSERT INTO ALTCUSTOMER VALUES
('895', 'Peter and Margaret''s', 0, 8000, '20');

-- Adding A New Column To ALTCUSTOMER
ALTER TABLE ALTCUSTOMER
ADD CUSTOMER_TYPE CHAR(1);

-- Adding Values To That Column
UPDATE ALTCUSTOMER
SET CUSTOMER_TYPE = 'R';

-- Altering Values Of New Column
UPDATE ALTCUSTOMER SET CUSTOMER_TYPE = 'S' WHERE CUSTOMER_NUM = '842';
UPDATE ALTCUSTOMER SET CUSTOMER_TYPE = 'D' WHERE CUSTOMER_NUM = '148';

-- Changing Format OF Table Columns
ALTER TABLE ALTCUSTOMER 
ALTER COLUMN CUSTOMER_NAME CHAR(50);

ALTER TABLE ALTCUSTOMER 
ALTER COLUMN CREDIT_LIMIT DECIMAL(8,2) NOT NULL;

-- Viewing Finished ALTCUSTOMER
SELECT * 
FROM ALTCUSTOMER;

-- Checking For Null Balances
SELECT * 
FROM ALTCUSTOMER 
WHERE BALANCE IS NULL;

-- Checking For No Balance
SELECT * 
FROM ALTCUSTOMER 
WHERE BALANCE = 0;

-- Deleting Values From ALTCUSTOMER
DELETE ALTCUSTOMER
WHERE CUSTOMER_NUM = '895';

-- Checking For Distinct Reps
SELECT DISTINCT REP_NUM 
FROM ALTCUSTOMER;

-- Isolating Specific Reps
SELECT * 
FROM ALTCUSTOMER 
WHERE REP_NUM = 20;

-- Deleting ALTCUSTOMER
DROP TABLE ALTCUSTOMER;

-- Creating NONAPPLIANCE Table
CREATE TABLE NONAPPLIANCE
(PART_NUM CHAR(4) PRIMARY KEY NOT NULL,
DESCRIPTION VARCHAR(15),
ON_HAND INT,
CLASS VARCHAR(3),
PRICE DECIMAL(6,2) );

-- Inserting Values Into NONAPPLIANCE
INSERT INTO NONAPPLIANCE
SELECT PART_NUM, DESCRIPTION, ON_HAND, CLASS, PRICE 
FROM PART 
WHERE CLASS != 'AP';

-- Updating Values In NONAPPLIANCE
UPDATE NONAPPLIANCE
SET DESCRIPTION = 'Stream Iron'
WHERE PART_NUM = 'AT94';

UPDATE NONAPPLIANCE
SET PRICE = PRICE * 1.03
WHERE CLASS = 'SG';

UPDATE NONAPPLIANCE
SET CLASS = NULL
WHERE PART_NUM = 'FD21';

-- Adding More Values To NONAPPLIANCE
INSERT INTO NONAPPLIANCE VALUES
('TL92', 'Edge Trimmer', 11, 'HW', 29.95);

-- Deleting Values In NONAPPLIANCE
DELETE NONAPPLIANCE
WHERE CLASS = 'SG';

-- Adding Column To NONAPPLIANCE Table
ALTER TABLE NONAPPLIANCE
ADD ON_HAND_VALUE DECIMAL(7, 2)

-- Adding Values To New Column
UPDATE NONAPPLIANCE
SET ON_HAND_VALUE = ON_HAND * PRICE;

-- Changing Column Format In NONAPPLIANCE
ALTER TABLE NONAPPLIANCE
ALTER COLUMN DESCRIPTION VARCHAR(30);

-- Viewing Completed NONAPPLIANCE Table
SELECT * FROM NONAPPLIANCE;

-- Dropping NONAPPLIANCE Table
DROP TABLE NONAPPLIANCE;

-- Creating Rep And Customer View
CREATE VIEW REP_CUS AS
SELECT R.REP_NUM AS RNUM, LAST_NAME AS RLAST, FIRST_NAME AS RFIRST, CUSTOMER_NUM AS CNUM, CUSTOMER_NAME AS CNAME
FROM REP R, CUSTOMER C
WHERE R.REP_NUM = C.REP_NUM;

-- Viewing Rep And Customer View
SELECT * 
FROM  REP_CUS 
ORDER BY RNUM, CNUM;

-- Creating View For Credit Limits
CREATE VIEW CRED_CUST AS
SELECT CREDIT_LIMIT, COUNT(*) AS NUM_CUSTOMERS
FROM CUSTOMER
GROUP BY CREDIT_LIMIT;

-- Viewing Credit Limit View
SELECT * 
FROM CRED_CUST 
ORDER BY CREDIT_LIMIT;

-- Creating View Housewares
CREATE VIEW HOUSEWARES AS
SELECT PART_NUM, DESCRIPTION, ON_HAND, FORMAT(PRICE, 'C') AS PRICE
FROM PART 
WHERE CLASS = 'HW';

-- Viewing Housewares View
SELECT * 
FROM HOUSEWARES;

-- Dropping A View
DROP VIEW HOUSEWARES;

-- A View To Track Major Customers
CREATE VIEW MAJOR_CUSTOMER AS
SELECT CUSTOMER_NUM, CUSTOMER_NAME, BALANCE, CREDIT_LIMIT, REP_NUM 
FROM CUSTOMER WHERE CREDIT_LIMIT < 10000;

-- Viewing MAJOR_CUSTOMER
SELECT * 
FROM MAJOR_CUSTOMER 
WHERE BALANCE > CREDIT_LIMIT;

-- A View To Track Orders By Part
CREATE VIEW PART_ORDER AS
SELECT P.PART_NUM, DESCRIPTION, PRICE, O.ORDER_NUM, O.ORDER_DATE, NUM_ORDERED, QUOTED_PRICE
FROM PART P, ORDER_LINE L, ORDERS O
WHERE P.PART_NUM = L.PART_NUM AND L.ORDER_NUM = O.ORDER_NUM

-- Viewing PART_ORDER
SELECT * 
FROM PART_ORDER 
WHERE QUOTED_PRICE > 100;

-- A View To Track Total Order Value By Order
CREATE VIEW ORDER_TOTAL AS
SELECT ORDER_NUM, SUM(NUM_ORDERED * QUOTED_PRICE) AS TOTAL_AMOUNT FROM ORDER_LINE 
GROUP BY ORDER_NUM;

-- Viewing ORDER_TOTAL
SELECT * 
FROM ORDER_TOTAL 
WHERE TOTAL_AMOUNT > 1000;

-- Creating An Index For BALANCE In The CUSTOMER Table
CREATE INDEX BALIND ON CUSTOMER(BALANCE);

-- Dropping The Index For BALANCE In The CUSTOMER Table
DROP INDEX CUSTOMER.BALIND;

-- Creating An Index For PART_NUM In The ORDER_LINE Table
CREATE INDEX PART_INDEX1 ON ORDER_LINE(PART_NUM);

-- Creating An Index For CLASS In The PART Table
CREATE INDEX PART_INDEX2 ON PART(CLASS);

-- Creating An Index For CLASS And WAREHOUSE In The PART Table
CREATE INDEX PART_INDEX3 ON PART(CLASS DESC, WAREHOUSE DESC);

-- Dropping The Index For CLASS And WAREHOUSE In The PART Table
DROP INDEX PART.PART_INDEX3;

-- Adding A Foreign Key To A Table
ALTER TABLE ORDER_LINE
ADD FOREIGN KEY (ORDER_NUM) REFERENCES ORDERS;

-- Setting Up A Data Validation Check
ALTER TABLE CUSTOMER
ADD CHECK (CREDIT_LIMIT IN (5000, 7500, 10000, 15000) );

-- Testing Data Validation Check
UPDATE CUSTOMER
SET CREDIT_LIMIT = 6000;