--									Stored Procedures And Triggers With Henry Books In SSMS

-- Load The Data Included In the "Database Creation For Analysis In SSMS" File Before Running The Below Commands.

-- Setting Database To Use
USE GUIDE;

-- Viewing All Henry Books Tables
SELECT BRANCH_NUM, BRANCH_NAME, BRANCH_LOCATION, NUM_EMPLOYEES 
FROM BRANCH;

SELECT PUBLISHER_CODE, PUBLISHER_NAME, CITY 
FROM PUBLISHER;

SELECT AUTHOR_NUM, AUTHOR_LAST, AUTHOR_FIRST 
FROM AUTHOR;

SELECT BOOK_CODE, AUTHOR_NUM, SEQUENCE 
FROM WROTE;

SELECT BOOK_CODE, BRANCH_NUM, ON_HAND 
FROM INVENTORY;

SELECT BOOK_CODE, TITLE, PUBLISHER_CODE, TYPE, FORMAT(PRICE, 'C') AS PRICE, PAPERBACK 
FROM BOOK;

-- Creating A Stored Procedure To Display Author Name
CREATE PROCEDURE AUTHOR_NAME
@NUM INT
AS SELECT AUTHOR_NUM, RTRIM(AUTHOR_FIRST)+' '+RTRIM(AUTHOR_LAST) AS AUTHOR_NAME
FROM AUTHOR WHERE AUTHOR_NUM = @NUM;

-- Execute AUTHOR_NAME Procedure
EXEC AUTHOR_NAME '13'

-- Creating A Stored Procedure To Display Book Title
CREATE PROCEDURE BOOK_TITLE
@CODE VARCHAR(4)
AS SELECT TITLE, B.PUBLISHER_CODE, P.PUBLISHER_NAME
FROM BOOK B, PUBLISHER P
WHERE B.PUBLISHER_CODE = P.PUBLISHER_CODE AND BOOK_CODE = @CODE;

-- Execute BOOK_TITLE Procedure
EXEC BOOK_TITLE '0180';

-- Creating A Stored Procedure To Add An Author
CREATE PROCEDURE ADD_AUTHOR
@num INT,
@last VARCHAR(15),
@first VARCHAR(15)
AS INSERT INTO AUTHOR VALUES
(@num, @last, @first);

-- Execute ADD_AUTHOR Procedure
EXEC ADD_AUTHOR '26','Martin','George';

SELECT * FROM AUTHOR;

-- Creating A Stored Procedure To Change Author Last Name
CREATE PROCEDURE CHG_AUTHOR_LNAME
@num INT,
@lastname VARCHAR(15)
AS UPDATE AUTHOR 
SET AUTHOR_LAST = @lastname
WHERE AUTHOR_NUM = @num;

-- Execute CHG_AUTHOR_LNAME Procedure
EXEC CHG_AUTHOR_LNAME '26','Miller';

SELECT * FROM AUTHOR;

-- Creating A Stored Procedure To Delete Author
CREATE PROCEDURE DEL_AUTHOR
@num INT
AS DELETE AUTHOR
WHERE AUTHOR_NUM = @num;

-- Execute DEL_AUTHOR Procedure
EXEC DEL_AUTHOR '26';

SELECT * FROM AUTHOR;

-- Creating A Stored Procedure To Display Books By Publisher
CREATE PROCEDURE PC_BOOKS
@code VARCHAR(3)
AS SELECT BOOK_CODE, TITLE, TYPE, PRICE
FROM BOOK
WHERE PUBLISHER_CODE = @code;

-- Execute PC_BOOKS Procedure
EXEC PC_BOOKS 'JP';

-- Creating A Stored Procedure To Change Book Pricing
CREATE PROCEDURE BOOK_PRICE
@code VARCHAR(4),
@change DECIMAL(4,2)
AS UPDATE BOOK
SET PRICE = PRICE + @change
WHERE BOOK_CODE = @code;

-- Execute BOOK_PRICE Procedure
EXEC BOOK_PRICE '0189','.50';

-- Preparing For Trigger Creation
CREATE VIEW TOH AS
SELECT BOOK_CODE, SUM(ON_HAND) AS TOTAL_ON_HAND 
FROM INVENTORY 
GROUP BY BOOK_CODE;

ALTER TABLE BOOK 
ADD TOTAL_ON_HAND INT;

UPDATE BOOK
SET BOOK.TOTAL_ON_HAND = TOH.TOTAL_ON_HAND
FROM TOH
JOIN BOOK ON BOOK.BOOK_CODE = TOH.BOOK_CODE		

DROP VIEW TOH;

SELECT * FROM BOOK;

-- Creating A Trigger For A New Order
CREATE TRIGGER ADD_ON_HAND
ON INVENTORY AFTER INSERT AS
DECLARE @new INT
DECLARE @code VARCHAR(4)
SELECT @new = (SELECT ON_HAND FROM INSERTED)
SELECT @code = (SELECT BOOK_CODE FROM INSERTED)
UPDATE BOOK
SET TOTAL_ON_HAND = TOTAL_ON_HAND + @new
WHERE BOOK_CODE = @code;

-- Testing ADD_ON_HAND Trigger
INSERT INTO INVENTORY VALUES
('0180', 4, 1); -- 0180 TOTAL_ON_HAND Should Become 3

SELECT * FROM INVENTORY;
SELECT * FROM BOOK;

-- Creating A Trigger For Updated Inventory
CREATE TRIGGER UPDATE_ON_HAND
ON INVENTORY AFTER UPDATE AS
DECLARE @new INT
DECLARE @old INT
DECLARE @code VARCHAR(4)
SELECT @new = (SELECT ON_HAND FROM INSERTED)
SELECT @old = (SELECT ON_HAND FROM DELETED)
SELECT @code = (SELECT BOOK_CODE FROM INSERTED)
UPDATE BOOK 
SET TOTAL_ON_HAND = TOTAL_ON_HAND + (@new - @old)
WHERE BOOK_CODE = @code;

-- Testing UPDATE_ON_HAND Trigger
UPDATE INVENTORY
SET ON_HAND = 2
WHERE BOOK_CODE = '0180' AND BRANCH_NUM = 4; -- 0180 TOTAL_ON_HAND Should Become 4 If Previous Trigger Was Used, Otherwise 3

SELECT * FROM INVENTORY;
SELECT * FROM BOOK;

-- Creating A Trigger For Deleted Order
CREATE TRIGGER DELETE_ON_HAND
ON INVENTORY AFTER DELETE AS
DECLARE @del INT
DECLARE @code VARCHAR(4)
SELECT @del = (SELECT ON_HAND FROM DELETED)
SELECT @code = (SELECT BOOK_CODE FROM DELETED)
UPDATE BOOK 
SET TOTAL_ON_HAND = TOTAL_ON_HAND - @del
WHERE BOOK_CODE = @code;

-- Testing DELETE_ON_HAND Trigger
DELETE INVENTORY
WHERE BOOK_CODE = '0180' AND BRANCH_NUM = 4; -- 0180 TOTAL_ON_HAND Should Become 2 If Previous Triggers Were Used

SELECT * FROM INVENTORY;
SELECT * FROM BOOK;			